apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'


def versionS="1.3"

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 4
        versionName versionS
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.libraryVariants.all {
        variant ->
            variant.outputs.all {
                outputFileName = "xhttp.aar"
            }
    }
}

this.project.afterEvaluate {
    def buildTask = this.project.tasks.getByName('assembleRelease')
    if (buildTask == null) throw GradleException
    buildTask.doLast {
        copyApk.execute()
    }
}

/** 执行完成打包后将文件复制到主项目的资源文件中*/
task copyApk {
    doLast {
        if (rootProject.file('app/libs/xhttp.aar').exists()) {
            println('我先删除了旧的xhttp.aar')
            rootProject.file('pp/libs/xhttp.aar').delete()
        }
        copy {
            from "${buildDir}/outputs/aar/xhttp.aar"
            into rootProject.file('app/libs/')
            println('新的xhttp.aar已经复制到app/libs/')
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.alibaba:fastjson:1.2.48'
}

version = versionS//version
group = "com.zhxh"//groupId

//打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
//打包源码doc文档
task javadoc(type: Javadoc) {
    options.encoding = "UTF-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

